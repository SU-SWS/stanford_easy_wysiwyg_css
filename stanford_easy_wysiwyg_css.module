<?php

/**
 * Implements hook_help().
 */
function stanford_easy_wysiwyg_css_help($path, $arg) {
  switch ($path) {
    case 'admin/help#stanford_easy_wysiwyg_css':
      return '<p>' . t('Better help text is surely needed.') . '</p>';
  }
}

/**
 * Implements hook_custom_theme().
 */
function stanford_easy_wysiwyg_css_custom_theme() {
  // Allow the user to request a particular theme via a query parameter.
  if (isset($_GET['stanford_easy_wysiwyg_css_theme'])) {
    return $_GET['stanford_easy_wysiwyg_css_theme'];
  }
}

/**
 * Implements hook_css_alter().
 */
function stanford_easy_wysiwyg_css_css_alter(&$css) {
  global $theme;
  $easy = variable_get("stanford_easy_wysiwyg_css", array());

  // Only add if we don't already have one.
  if (isset($easy[$theme])) {
    return;
  }

  // Allow theme to alter first.
  $func = $theme . "_css_alter";
  if (function_exists($func)) {
    $func($css);
  }

  $wysiwyg_css_data = drupal_add_css();
  $wysiwyg_css = array();

  // Remove print stuff.
  foreach ($wysiwyg_css_data as $path => $data) {
    if ($data['media'] == "print") {
      continue;
    }
    $wysiwyg_css[] = $path;
  }

  $easy[$theme] = $wysiwyg_css;
  variable_set("stanford_easy_wysiwyg_css", $easy);

}

/**
 * Implements hook_flush_caches().
 */
function stanford_easy_wysiwyg_css_flush_caches() {
  variable_del('stanford_easy_wysiwyg_css');
}

/**
 * [stanford_easy_wysiwyg_css_wysiwyg_editor_settings_alter description]
 * @param  [type] &$settings [description]
 * @param  [type] $context   [description]
 * @return [type]            [description]
 */
function stanford_easy_wysiwyg_css_wysiwyg_editor_settings_alter(&$settings, $context) {

  if ($context['profile']->settings['css_setting'] == "easy") {
    $sheets = stanford_easy_wysiwyg_css_get_sheets();
    foreach ($sheets as $k => $url) {
      $sheets[$k] = url($url);
    }
    $settings['contentsCss'] = $sheets;
  }

}

/**
 * [stanford_easy_wysiwyg_css_get_sheets description]
 * @return [type] [description]
 */
function stanford_easy_wysiwyg_css_get_sheets() {

  $easy = variable_get("stanford_easy_wysiwyg_css", array());
  $theme_default = variable_get("theme_default");

  // Woot we have the stuff.
  if (isset($easy[$theme_default])) {
    return $easy[$theme_default];
  }

  // The theme has not been visited yet. Lets do that!
  $url = url("<front>", array("absolute" => TRUE));
  $options = array("query" => array("stanford_easy_wysiwyg_css_theme" => $theme_default));
  $result = drupal_http_request($url, $options);

  // The variable should be in the DB for us now.
  $easy_dbq = db_select("variable", "v")
              ->fields('v', array("value"))
              ->condition('name', 'stanford_easy_wysiwyg_css')
              ->execute()
              ->fetchObject();

  // Things can go wrong so do a check like a good dev.
  if (!isset($easy_dbq->value)) {
    drupal_set_message("Failed to gather css for the WYSIWYG editor. Please visit the home page and try again.", "error");
    return;
  }

  // Woot.
  $easy = unserialize($easy_dbq->value);

  // One last check before we are home free.
  if (!isset($easy[$theme_default])) {
    drupal_set_message("Failed to gather css for the WYSIWYG editor. Please visit the home page and try again.", "error");
    return;
  }

  // Gotcha!
  return $easy[$theme_default];

}

/**
 * [stanford_easy_wysiwyg_form_css_wysiwyg_profile_form_alter description]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function stanford_easy_wysiwyg_css_form_wysiwyg_profile_form_alter(&$form, &$form_state) {
  $form['css']['css_setting']['#options']['easy'] = t("Default theme aggregated css");
}
